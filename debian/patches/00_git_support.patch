diff --git a/bin/control_rancid.in b/bin/control_rancid.in
index b5cdea4..45c2ac8 100644
--- a/bin/control_rancid.in
+++ b/bin/control_rancid.in
@@ -151,33 +151,71 @@ if [ ! -d $DIR ] ; then
 fi
 cd $DIR
 
-# create a .cvsignore
-if [ ! -f .cvsignore ] ; then
-    rm -f .cvsignore
-    cat >.cvsignore <<EOF
-.cvsignore
+case $RCSSYS in
+    cvs )
+       if [ ! -f .cvsignore ]; then
+           rm -f .cvsignore
+           create_ignore > .cvsignore
+           cvs add .cvsignore
+           cvs commit -m "Adding .cvsignore"
+       fi
+       ;;
+    svn )
+       svn proplist . | grep -q 'svn:ignore'
+       if [ $? -ne 0 ]; then
+           create_ignore > .svnignore
+           svn propset svn:ignore -F .svnignore .
+           svn commit -m "Adding svn:ignore"
+           rm -f .svnignore
+       fi
+       ;;
+    git )
+       if [ ! -f .gitignore ]; then
+           rm -f .gitignore
+           cat<<EOF > .gitignore
+*~
+routers.added
 routers.all
+routers.all.new
+routers.db
+routers.deleted
 routers.down
+routers.down.new
+routers.failed
+routers.mail
+routers.single
 routers.up
+routers.up.new
+routers.up.missed
 EOF
-    if [ $RCSSYS = svn ] ; then
-	svn propset svn:ignore -F .cvsignore .
-	svn update .
-	svn commit -m 'set svn:ignores' .
-    fi
-fi
+           (
+               flock -x 200
+               git add .gitignore
+               git commit -m "Adding .gitignore"
+           ) 200>$BASEDIR/.lockfile
+       fi
+       ;;
+esac
+
+case $RCSSYS in
+    cvs | svn )
+        # do cvs/svn update of router.db in case anyone has fiddled.
+       $RCSSYS update router.db > $TMP 2>&1
+       grep "^C" $TMP > /dev/null
+       if [ $? -eq 0 ] ; then
+           echo "There were $RCSSYS conflicts during update."
+           echo ""
+           cat $TMP
+           rm -f $TMP
+           exit 1
+       fi
+       rm -f $TMP
+       ;;
+    git )
+       # do nothing here (for now)
+       ;;
+esac
 
-# do cvs update of router.db in case anyone has fiddled.
-$RCSSYS update router.db > $TMP 2>&1
-grep "^C" $TMP > /dev/null
-if [ $? -eq 0 ] ; then
-    echo "There were $RCSSYS conflicts during update."
-    echo ""
-    cat $TMP
-    rm -f $TMP
-    exit 1
-fi
-rm -f $TMP
 
 if [ ! -f $DIR/router.db ] ; then
     echo "$DIR/router.db does not exist."
diff --git a/bin/rancid-cvs.in b/bin/rancid-cvs.in
index a8f487e..0e247c1 100644
--- a/bin/rancid-cvs.in
+++ b/bin/rancid-cvs.in
@@ -87,18 +87,44 @@ cd $BASEDIR
 
 # RCS system
 RCSSYS=${RCSSYS:=cvs};
-if [ $RCSSYS != "cvs" -a $RCSSYS != "svn" ] ; then
-    echo "$RCSSYS is not a valid value for RCSSYS."
-    exit 1
-fi
+case $RCSSYS in
+    cvs | svn )
+	# we're good
+	;;
+    git )
+	# force $CVSROOT
+	CVSROOT=$BASEDIR/.git
+	;;
+    * )
+	echo "$RCSSYS is not a valid value for RCSSYS."
+	exit 1
+	;;
+esac
 
 # Top level CVS stuff
 if [ ! -d $CVSROOT ]; then
-    if [ $RCSSYS = cvs ]; then
-	cvs -d $CVSROOT init
-    else
-	svnadmin create $CVSROOT @SVN_FSTYPE@
-    fi
+    case $RCSSYS in
+	cvs )
+	    cvs -d $CVSROOT init
+	    ;;
+	svn )
+	    svnadmin create $CVSROOT @SVN_FSTYPE@
+	    ;;
+	git )
+	    # git does not use $CVSROOT, instead configs are stored in $BASEDIR
+	    (
+		flock -x 200
+		git init
+		rm -f .gitignore
+		echo "/logs" >> .gitignore
+		echo "/.lockfile" >> .gitignore
+		echo "*~" >> .gitignore
+		echo ".#*" >> .gitignore
+		echo "*.new" >> .gitignore
+		git add .gitignore
+		git commit -m "Initializing repository."
+	    ) 200>$BASEDIR/.lockfile
+    esac
 fi
 
 # Log dir
@@ -123,21 +149,48 @@ do
     if [ ! -d $DIR ]; then
 	mkdir -p $DIR
 	cd $DIR
-	if [ $RCSSYS = cvs ]; then
-	    cvs import -m "$GROUP" $GROUP new rancid
-	    cd $BASEDIR
-	    cvs checkout $GROUP
-	else
-	    svn import -m "$GROUP" . file:///$CVSROOT/$GROUP
-	    cd $BASEDIR
-	    svn checkout file:///$CVSROOT/$GROUP $GROUP
-	fi
+	case $RCSSYS in
+	    cvs )
+		cvs import -m "$GROUP" $GROUP new rancid
+		cd $BASEDIR
+		cvs checkout $GROUP
+		;;
+	    svn )
+		svn import -m "$GROUP" . file:///$CVSROOT/$GROUP
+		cd $BASEDIR
+		svn checkout file:///$CVSROOT/$GROUP $GROUP
+		;;
+	    git )
+		cd $BASEDIR
+		echo "$GROUP/routers.all" >> .gitignore
+		echo "$GROUP/routers.down" >> .gitignore
+		echo "$GROUP/routers.up" >> .gitignore
+		echo "$GROUP/routers.mail" >> .gitignore
+		echo "$GROUP/routers.added" >> .gitignore
+		echo "$GROUP/routers.deleted" >> .gitignore
+		echo "$GROUP/routers.single" >> .gitignore
+		echo "$GROUP/routers.up.missed" >> .gitignore
+		echo "$GROUP/routers.failed" >> .gitignore
+		(
+		    flock -x 200
+		    git add .gitignore
+		    git commit -m "Update .gitignore"
+		) 200>$BASEDIR/.lockfile
+		;;
+	esac
     fi
     cd $DIR
     if [ ! -d configs ]; then
 	mkdir configs
-	$RCSSYS add configs
-	$RCSSYS commit -m 'new' configs
+	case $RCSSYS in
+	    cvs | svn )
+		$RCSSYS add configs
+		$RCSSYS commit -m 'new' configs
+		;;
+	    git )
+		# nothing to be done here
+		;;
+	esac
     fi
 
     # main files
@@ -152,7 +205,18 @@ do
     fi
     if [ ! -f router.db ]; then
 	touch router.db
-	$RCSSYS add router.db
-	$RCSSYS commit -m 'new' router.db
+	case $RCSSYS in
+	    cvs | svn )
+		$RCSSYS add router.db
+		$RCSSYS commit -m 'new' router.db
+		;;
+	    git )
+		(
+		    flock -x 200
+		    git add router.db
+		    git commit -m "Initializing $GROUP"
+		) 200>$BASEDIR/.lockfile
+		;;
+	esac
     fi
 done
diff --git a/etc/rancid.conf.sample.in b/etc/rancid.conf.sample.in
index d97e9c0..d8b2b1c 100644
--- a/etc/rancid.conf.sample.in
+++ b/etc/rancid.conf.sample.in
@@ -25,9 +25,9 @@ CVSROOT=$BASEDIR/CVS; export CVSROOT
 # Location of log files produced by rancid-run(1).
 LOGDIR=$BASEDIR/logs; export LOGDIR
 #
-# Select which RCS system to use, "cvs" (default) or "svn".  Do not change
-# this after CVSROOT has been created with rancid-cvs.  Changing between these
-# requires manual conversions.
+# Select which RCS system to use, "cvs" (default), "svn" or "git".  Do
+# not change this after CVSROOT has been created with rancid-cvs.
+# Changing between these requires manual conversions.
 RCSSYS=@RCSSYS@; export RCSSYS
 #
 # if ACLSORT is NO, access-lists will NOT be sorted.
